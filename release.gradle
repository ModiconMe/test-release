def developBranchName = 'develop'
def masterBranchName = 'main'
def releaseBranchName = "release/$version"
def versionProperties = ['version', 'version1']

tasks.register('smartixRelease') {
    doFirst {
        releaseMaster(developBranchName, masterBranchName)
        releaseRelease(releaseBranchName, developBranchName)
        upVersionAndWriteToProps(versionProperties)
        releaseDevelop(developBranchName)
    }
}

private void checkoutDevelop(developBranchName) {
    exec {
        commandLine 'git', 'checkout', developBranchName
    }
}

private void releaseMaster(developBranchName, masterBranchName) {
    checkoutDevelop(developBranchName)
    exec {
        commandLine 'git', 'pull', 'origin', developBranchName
    }
    exec {
        commandLine 'git', 'checkout', masterBranchName
    }
    exec {
        commandLine 'git', 'merge', "origin/$developBranchName"
    }
    exec {
        commandLine 'git', 'push', 'origin', masterBranchName
    }
}

private void releaseRelease(releaseBranchName, developBranchName) {
    checkoutDevelop(developBranchName)
    exec {
        commandLine 'git', 'branch', releaseBranchName
    }
    exec {
        commandLine 'git', 'checkout', releaseBranchName
    }
    exec {
        commandLine 'git', 'merge', "origin/$developBranchName"
    }
    exec {
        commandLine 'git', 'push', 'origin', releaseBranchName
    }
}


private void releaseDevelop(developBranchName) {
    checkoutDevelop(developBranchName)
    exec {
        commandLine 'git', 'commit', "-am \"Release $version\""
    }
    exec {
        commandLine 'git', 'push', 'origin', developBranchName
    }
}

private void upVersionAndWriteToProps(versionProperties) {
    def props = new Properties()
    def file = file("gradle.properties")
    file.withInputStream { props.load(it) }
    def versionProperty = props.get('version') as String
    def versionArray = versionProperty.split('\\.')

    if (versionArray.size() != 3) {
        throw new IllegalArgumentException('Wrong version: ' + versionProperty)
    }

    def firstDigit = versionArray[0] as int
    def secondDigit = versionArray[1] as int
    def thirdDigit = versionArray[2] as int

    if (firstDigit > 9 || firstDigit < 0 || secondDigit > 9 || secondDigit < 0 || thirdDigit > 9 || thirdDigit < 0) {
        throw new IllegalArgumentException('Wrong version: ' + versionProperty)
    }

    if (secondDigit == 9 && thirdDigit == 9) {
        firstDigit++
        secondDigit = 0
        thirdDigit = 0
    } else if (thirdDigit == 9) {
        secondDigit++
        thirdDigit = 0
    } else if (thirdDigit < 9) {
        thirdDigit++
    }

    def newVersion = "$firstDigit.$secondDigit.$thirdDigit"

    for (final String name in versionProperties) {
        props.setProperty(name, newVersion)
    }
    println props

    props.store(file.newWriter(), null)
}