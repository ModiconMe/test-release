import java.nio.file.Files

//release {
//    failOnCommitNeeded = true
//    failOnPublishNeeded = true
//    failOnSnapshotDependencies = true
//    failOnUnversionedFiles = true
//    failOnUpdateNeeded = true
//    preTagCommitMessage = "[Gradle Release Plugin] - pre tag commit: $version"
//    tagCommitMessage = "[Gradle Release Plugin] - creating tag: $version"
//    newVersionCommitMessage = "[Gradle Release Plugin] - new version commit: $version"
//    tagTemplate = '${version}'
//    versionProperties.add('version1')
//    versionPropertyFile = 'gradle.properties'
//    snapshotSuffix = '-SNAPSHOT'
//    buildTasks = []
//
//    pushReleaseVersionBranch = "release/$version"
////    pushReleaseVersionBranch = "main"
//
//    git {
//        requireBranch.set("develop")
//    }
//}
//
//
//checkoutMergeToReleaseBranch {
//    doFirst {
//        project.exec {
//            commandLine 'git', 'branch', "release/$version"
//        }
//    }
//}

tasks.register('checkoutDevelop', Exec) {
    def developBranchName = 'develop'
    commandLine 'git', 'checkout', developBranchName
}
//tasks.register('checkoutDevelop')

tasks.register('smartixRelease') {
    doFirst {
        def developBranchName = 'develop'
        def masterBranchName = 'main'
        def releaseBranchName = "release/$version"
//        exec {
//            commandLine 'git', 'checkout', developBranchName
//        }
        checkoutDevelop
        exec {
            commandLine 'git', 'pull', 'origin', developBranchName
        }
        exec {
            commandLine 'git', 'checkout', masterBranchName
        }
        exec {
            commandLine 'git', 'merge', "origin/$developBranchName"
        }
        exec {
            commandLine 'git', 'push', 'origin', masterBranchName
        }

        exec {
            commandLine 'git', 'branch', releaseBranchName
        }
        exec {
            commandLine 'git', 'checkout', releaseBranchName
        }
        exec {
            commandLine 'git', 'merge', "origin/$developBranchName"
        }
        exec {
            commandLine 'git', 'push', 'origin', "release/$version"
        }

//        exec {
//            commandLine 'git', 'checkout', developBranchName
//        }
        checkoutDevelop

        upVersionAndWriteToProps()

        exec {
            commandLine 'git', 'commit', "-am \"Release $version\""
        }
        exec {
            commandLine 'git', 'push', 'origin', developBranchName
        }
    }
}

private void upVersionAndWriteToProps() {
    def versionProperties = ['version', 'version1']
    def props = new Properties()
    def file = file("gradle.properties")
    file.withInputStream { props.load(it) }
    def versionProperty = props.get('version') as String
    def versionArray = versionProperty.split('\\.')

    if (versionArray.size() < 3) {
        throw new IllegalArgumentException('Wrong version: ' + versionProperty)
    }

    def firstDigit = versionArray[0] as int
    def secondDigit = versionArray[1] as int
    def thirdDigit = versionArray[2] as int

    if (firstDigit > 9 || firstDigit < 0 || secondDigit > 9 || secondDigit < 0 || thirdDigit > 9 || thirdDigit < 0) {
        throw new IllegalArgumentException('Wrong version: ' + versionProperty)
    }

    if (secondDigit == 9 && thirdDigit == 9) {
        firstDigit++
        secondDigit = 0
        thirdDigit = 0
    } else if (thirdDigit == 9) {
        secondDigit++
        thirdDigit = 0
    } else if (thirdDigit < 9) {
        thirdDigit++
    }

    def newVersion = "$firstDigit.$secondDigit.$thirdDigit"

    for (final String name in versionProperties) {
        props.setProperty(name, newVersion)
    }
    println props

    props.store(file.newWriter(), null)
}